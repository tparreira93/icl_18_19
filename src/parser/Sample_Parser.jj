PARSER_BEGIN(Parser)

package parser;

import AST.*;
import java.util.ArrayList;
import java.util.List;


public class Parser {}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  | 	
  < EL: ";;" >
  |
  < let: "let" >
  |
  < LAMBDA_OPERATOR: "=>" >
  |
  < ASSIGNMENT: "=" >
  |
  < IN: "in" >
  |
  < END: "end" >
  |
  < function: "function" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Comma: "," >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL> { return t; }
}


ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{ Token op;
  ASTNode f1, f2;
  List<ASTNode> arguments = new ArrayList<ASTNode>();
}
{
    f1 = Fact() (
        (
            ( op = <TIMES> | op = <DIV> )
            f2 = Fact()
            { if (op.kind == TIMES)
                  f1 = new ASTMul(f1,f2);
              else  f1 = new ASTDiv(f1,f2);
            }
        )
        |
        (<LPAR> (f2 = Exp() { arguments.add(f2); }) (<Comma> f2 = Exp() {arguments.add(f2); }) <RPAR>) { return new ASTApply(f1, arguments); }
    )*
    { return f1; }
}

ASTNode Fact() :
{ Token n;
  ASTNode t, body, assignment;
  List<String> arguments = new ArrayList<String>();
  List<Assignment> assignments = new ArrayList<Assignment>();
}
{
   n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); return t; }
   |
   <MINUS> n=<Num> { return new ASTSub(new ASTNum(0), new ASTNum(Integer.parseInt(n.image))); }
   | 
   <LPAR> t = Exp() <RPAR> { return t; }
   |
   <let> (n = <Id> <ASSIGNMENT> assignment = Exp() { assignments.add(new Assignment(n.image, assignment)); }) (<Comma> n = <Id> <ASSIGNMENT> assignment = Exp() { assignments.add(new Assignment(n.image, assignment)); } )* <IN> body = Exp() <END> { return new ASTLet(assignments, body); }
   |
   n = <Id> { return new ASTId(n.image); }
   |
   <function> (n = <Id> {arguments.add(n.image); }) (<Comma> n = <Id> {arguments.add(n.image); })*  <LAMBDA_OPERATOR> body = Exp() <END> { return new ASTFun(arguments, body); }
}





















