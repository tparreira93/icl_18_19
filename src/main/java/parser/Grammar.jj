// Resources
// http://www.craftinginterpreters.com/parsing-expressions.html

options
{
    //other options
    //DEBUG_PARSER=true;
    STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;

import ast.*;
import types.*;
import java.util.ArrayList;
import java.util.List;


public class Parser {}

PARSER_END(Parser)

SKIP :
{
      " "
    | "\t"
    | "\r"
    | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
    < "*/" > : DEFAULT
    | < ~[] >
}

//< WithinString >
// TOKEN : {
//    <STRING_CONTENT:
//        (
//             "\\" ~[]     //any escaped character
//        |                 //or
//            ~["\"","\\"]  //any character except quote or backslash
//        )*
//        >
//}

TOKEN :
{
  //< STRING_DELIMITER: "\"" >
  //|
  //< STRING_START: <STRING_DELIMITER> > : WithinString
  //|
  //< END_STRING: <STRING_DELIMITER> >
  //|
  < QUOTED:
      "\""
      (
           "\\" ~[]     //any escaped character
      |                 //or
          ~["\"","\\"]  //any character except quote or backslash
      )*
      "\"" >
  |
  < Num: (["0"-"9"]) + >
  |
  < DOT: "." >
  |
  < PLUS : "+" >
  |
  < RECORD_BEGIN : "[" >
  |
  < RECORD_END : "]" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  | 	
  < EL: ";;" >
  |
  < let: "let" >
  |
  < PRINTLN: "println" >
  |
  < LAMBDA: "->" >
  |
  < BINDING: "=" >
  |
  < COLON: ":" >
  |
  < ASSIGNMENT: <COLON> "=" >
  |
  < IN: "in" >
  |
  < END: "end" >
  |
  < function: "fun" >
  |
  < COMMA: "," >
  |
  < REFERENCE: "new" >
  |
  < DEREFERENCE: "!" >
  |
  < SEQUENCE: ";" >
  |
  < WHILE: "while" >
  |
  < DO: "do" >
  |
  < BOOLVALUE: ("true" | "false")>
  |
  < INT: "int" >
  |
  < BOOL: "bool" >
  |
  < REF: "ref" >
  |
  < STRING: "string" >
  |
  < EQUAL: "==" >
  |
  < NOT_EQUAL: "<>" >
  |
  < GREATER: ">" >
  |
  < GREATEROREQUAL: ">=" >
  |
  < SMALLER: "<" >
  |
  < SMALLEROREQUAL: "<=" >
  |
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < NOT: "~" >
  |
  < IF: "if" >
  |
  < THEN: "then" >
  |
  < ELSE: "else" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

List<ASTNode> FunctionArguments() : {
  List<ASTNode> arguments = new ArrayList<ASTNode>();
  ASTNode arg;
}
{
    ( (arg = Exp() { arguments.add(arg); }) (<COMMA> arg = Exp() {arguments.add(arg); })*)?
    {
        return arguments;
    }
}

List<Parameter> ArgumentList() :
{
    Token n;
    IType t;
    List<Parameter> arguments = new ArrayList<Parameter>();
}
{
    (
        n = <Id> <COLON> t = GetType() {arguments.add(new Parameter(n.image, t)); }
        ( <COMMA> {arguments.addAll(ArgumentList()); })*
    )?
    {
        return arguments;
    }
}

IType GetType() :
{
    IType t;
    List<IType> typeList = new ArrayList<IType>();
}
{
    < INT > { return IntType.getInstance(); }
    |
    < BOOL > { return BoolType.getInstance(); }
    |
    < STRING > { return StringType.getInstance(); }
    |
    < REF > t = GetType() { return new RefType(t); }
    |
    (
        <LPAR>
        (
            t = GetType() { typeList.add(t); }
            (<COMMA> t = GetType() { typeList.add(t); } )*)
        ?
        <RPAR>  t = GetType()
        {
            return new FunctionType(typeList, t);
        }
    )
}

List<Binding> BindingList() :
{
    Token n;
    List<Binding> bindings = new ArrayList<Binding>();
    ASTNode assignment;
    IType t;
}
{
    n = <Id>
        (
            <COLON> t = GetType() <BINDING> assignment = GetSequence() { bindings.add(new Binding(n.image, assignment, t)); }
        )
        (<COMMA> { bindings.addAll(BindingList()); } )*
    {
        return bindings;
    }
}

ASTNode GetLet() :
{
  List<Binding> bindings = new ArrayList<Binding>();
  ASTNode body;
}
{
   <let>
        bindings = BindingList()
   <IN> body = GetSequence()
   <END> { return new ASTLet(bindings, body); }
}

ASTNode GetFunction() :
{
  List<Parameter> arguments = new ArrayList<Parameter>();
  ASTNode body;
}
{
   <function> arguments = ArgumentList()  <LAMBDA>
        body = GetSequence()
    <END> { return new ASTFun(arguments, body); }
}

ASTNode GetRecord() :
{
    ASTNode n;
    Token t;
    List<SimpleBinding<ASTNode>> binds = new ArrayList<SimpleBinding<ASTNode>>();
}
{
    <RECORD_BEGIN>
        t = <Id> <BINDING> n = GetLogical() { binds.add(new SimpleBinding<ASTNode>(t.image, n)); }
        (
            <COMMA> t = <Id> <BINDING> n = GetLogical() { binds.add(new SimpleBinding<ASTNode>(t.image, n)); }
        )*
    <RECORD_END>
    {
        return new ASTRecord(binds);
    }
}

ASTNode GetPrintln() :
{
    ASTNode n;
}
{
    <PRINTLN> n = Fact() { return new ASTPrintln(n); }
}

ASTNode GetId() :
{
    Token n;
    ASTNode id, ass, node;
}
{
    (
        n = <Id> {
                node = new ASTId(n.image);
                id = node;
            }
    )
    { return node; }
}

ASTNode GetNum() :
{
    Token n;
}
{
   n = <Num> { return new ASTNum(Integer.parseInt(n.image)); }
}

ASTNode GetString() :
{
    Token str;
}
{
    //<STRING_START> str = <STRING_CONTENT> <END_STRING> {return new ASTString(str.image); }
    str = <QUOTED> {return new ASTString(str.image.substring(1,str.image.length() - 1)); }
}

ASTNode GetReference() :
{
    ASTNode ref;
}
{
   <REFERENCE> ref = Fact() { return new ASTReference(ref); }
}

ASTNode GetPAR() :
{
    ASTNode node;
}
{
   <LPAR> node = GetSequence() <RPAR> { return node; }
}

ASTNode GetBool() :
{
    Token t;
}
{
    t = <BOOLVALUE>
    {
        return new ASTBool(Boolean.parseBoolean(t.image));
    }
}

ASTNode GetAssignment(ASTNode id) :
{
    ASTNode node;
    Token t;
}
{
    <ASSIGNMENT> node = Exp() { return new ASTAssignment(id, node); }
}

ASTNode GetDereference() :
{
    ASTNode node;
}
{
    <DEREFERENCE> node = Fact() { return new ASTDereference(node); }
}

ASTNode GetIfThenElse() :
{
    ASTNode node_if = null, node_then = null, node_else = null;
}
{
    <IF> node_if = GetSequence() <THEN> node_then = GetSequence() <ELSE> node_else = GetSequence() <END>
    {
        return new ASTIfThenElse(node_if, node_then, node_else);
    }
}

ASTNode GetWhileDo() :
{
    ASTNode condition, action;
}
{
    <WHILE> condition = GetSequence() <DO> action = GetSequence() <END>
    {
        return new ASTWhile(condition, action);
    }
}

ASTNode GetOr(ASTNode e1) :
{
    ASTNode e2;
}
{
    <OR> e2 = GetLogical() { return new ASTOr(e1, e2); }
}

ASTNode GetAnd(ASTNode e1) :
{
    ASTNode e2;
}
{
    <AND> e2 = GetLogical() { return new ASTAnd(e1, e2); }
}

ASTNode GetRecordApply(ASTNode record) :
{
    Token id;
}
{
    <DOT> id = <Id> { return new ASTRecordSelect(record, id.image); }
}

ASTNode GetFunctionApply(ASTNode id) :
{
    List<ASTNode> arguments;
}
{
    <LPAR> arguments = FunctionArguments() <RPAR> { return new ASTApply(id, arguments); }
}

ASTNode Start():
{ ASTNode t; }
{
   t = GetSequence() <EL> { return t; }
}


ASTNode GetSequence() :
{
    List<ASTNode> sequence = new ArrayList<ASTNode>();
    ASTNode n;
}
{
    n = GetLogical() { sequence.add(n); } (<SEQUENCE> n = GetSequence() { sequence.add(n); })?
    {
        if (sequence.size() == 1)
            return n;
        return new ASTSequence(sequence);
    }
}

ASTNode GetLogical() :
{
    ASTNode e1, e2;
}
{
    e1 = GetEquality()
    (
        LOOKAHEAD(2)
        (
            e1 = GetOr(e1)
            |
            e1 = GetAnd(e1)
        )
    ) *
    {
        return e1;
    }
}

ASTNode GetEquality() :
{
    ASTNode left, node;
}
{
    left = GetComparison()
    (
        LOOKAHEAD(2)
        (
            <EQUAL> node = GetEquality() { left = new ASTEqual(left, node); }
            |
            <NOT_EQUAL> node = GetEquality() { left = new ASTNotEqual(left, node); }
        )
    ) *
    {
        return left;
    }
}

ASTNode GetComparison() :
{
    ASTNode left, node;
}
{
    left = Exp()
    (
        <GREATER> node = Exp() { left = new ASTGreater(left, node); }
        |
        <GREATEROREQUAL> node = Exp() { left = new ASTGreaterOrEqual(left, node); }
        |
        <SMALLER> node = Exp() { left = new ASTSmaller(left, node); }
        |
        <SMALLEROREQUAL> node = Exp() { left = new ASTSmallerOrEqual(left, node); }
    )*
    {
        return left;
    }
}

ASTNode Exp() :
{
    Token op;
    ASTNode t1, t2;
}
{
     t1=Term()
     (
        LOOKAHEAD(2)
        (
            (
                op=<PLUS>
                |
                op=<MINUS>
            )
            t2 = Term()
            {
                if (op.kind == PLUS)
                    t1 = new ASTPlus(t1,t2);
                else
                    t1 = new ASTSub(t1,t2);
            }
        )
     ) *
    { return t1; }
}
ASTNode Term() :
{ Token op;
  ASTNode node, f2;
}
{
    node = Unary()
    (
        LOOKAHEAD(2)
        (
            ( op = <TIMES> | op = <DIV> )
            f2 = Unary()
            {
                if (op.kind == TIMES)
                    node = new ASTMul(node,f2);
                else
                    node = new ASTDiv(node,f2);
            }
        )
    ) *
    { return node; }
}

ASTNode Unary() :
{
    Token op;
    ASTNode node;
}
{
    (
        (
            (
                op = <NOT>
                |
                op = <MINUS>
            )
            node = Binary()
            {
                if (op.kind == NOT)
                    node = new ASTNot(node);
                else
                    node = new ASTSub(new ASTNum(0), node);
            }
        )
        |
        node = Binary()
    )
    {
        return node;
    }
}

ASTNode Binary() :
{
    ASTNode node;
    List<ASTNode> arguments;
}
{
    node = Fact()
    (
        node = GetAssignment(node)
        |
        node = GetFunctionApply(node)
        |
        node = GetRecordApply(node)
    )?
    {
        return node;
    }
}

ASTNode Fact() :
{
    ASTNode node;
}
{
    (
        node = GetDereference()
        |
        node = GetBool()
        |
        node = GetPAR()
        |
        node = GetIfThenElse()
        |
        node = GetWhileDo()
        |
        node = GetNum()
        |
        node = GetId()
        |
        node = GetReference()
        |
        node = GetLet()
        |
        node = GetFunction()
        |
        node = GetString()
        |
        node = GetRecord()
        |
        node = GetPrintln()
    )
    {
        return node;
    }
}
