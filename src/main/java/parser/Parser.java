/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import AST.*;
import java.util.ArrayList;
import java.util.List;


public class Parser implements ParserConstants {

  final public List<ASTNode> FunctionArguments() throws ParseException {
  List<ASTNode> arguments = new ArrayList<ASTNode>();
  ASTNode arg;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
    case MINUS:
    case LPAR:
    case let:
    case function:
    case REFERENCE:
    case DEREFERENCE:
    case WHILE:
    case BOOL:
    case NOT:
    case IF:
    case Id:
      arg = Exp();
                     arguments.add(arg);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        arg = Exp();
                                                                  arguments.add(arg);
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
        {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public List<String> ArgumentList() throws ParseException {
    Token n;
    List<String> arguments = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      n = jj_consume_token(Id);
                arguments.add(n.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        n = jj_consume_token(Id);
                                                             arguments.add(n.image);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public List<Var> AssignmentList() throws ParseException {
    Token n;
    List<Var> vars = new ArrayList<Var>();
    ASTNode assignment;
    n = jj_consume_token(Id);
    jj_consume_token(ASSIGNMENT);
    assignment = GetSequence();
                                                       vars.add(new Var(n.image, assignment));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      n = jj_consume_token(Id);
      jj_consume_token(ASSIGNMENT);
      assignment = GetSequence();
                                                                    vars.add(new Var(n.image, assignment));
    }
        {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetLet() throws ParseException {
  List<Var> vars = new ArrayList<Var>();
  ASTNode body;
    jj_consume_token(let);
    vars = AssignmentList();
    jj_consume_token(IN);
    body = GetSequence();
    jj_consume_token(END);
           {if (true) return new ASTLet(vars, body);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetFunction() throws ParseException {
  List<String> arguments = new ArrayList<String>();
  ASTNode body;
    jj_consume_token(function);
    arguments = ArgumentList();
    jj_consume_token(LAMBDA_OPERATOR);
    body = GetSequence();
    jj_consume_token(END);
            {if (true) return new ASTFun(arguments, body);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetId() throws ParseException {
    Token n;
    ASTNode id, ass, node;
    n = jj_consume_token(Id);
                node = new ASTId(n.image);
                id = node;
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetNum() throws ParseException {
    Token n;
    n = jj_consume_token(Num);
               {if (true) return new ASTNum(Integer.parseInt(n.image));}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetReference() throws ParseException {
    ASTNode ref;
    jj_consume_token(REFERENCE);
    ref = Fact();
                              {if (true) return new ASTReference(ref);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetPAR() throws ParseException {
    ASTNode node;
    jj_consume_token(LPAR);
    node = GetSequence();
    jj_consume_token(RPAR);
                                        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetBool() throws ParseException {
    Token t;
    t = jj_consume_token(BOOL);
        {if (true) return new ASTBool(Boolean.parseBoolean(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetAssignment(ASTNode id) throws ParseException {
    ASTNode node;
    Token t;
    jj_consume_token(ASSIGNMENT);
    node = Exp();
                                {if (true) return new ASTAssignment(id, node);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetDereference() throws ParseException {
    ASTNode node;
    jj_consume_token(DEREFERENCE);
    node = Fact();
                                  {if (true) return new ASTDereference(node);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetIfThenElse() throws ParseException {
    ASTNode node_if = null, node_then = null, node_else = null;
    jj_consume_token(IF);
    node_if = GetSequence();
    jj_consume_token(THEN);
    node_then = GetSequence();
    jj_consume_token(ELSE);
    node_else = GetSequence();
    jj_consume_token(END);
        {if (true) return new ASTIfThenElse(node_if, node_then, node_else);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetWhileDo() throws ParseException {
    ASTNode condition, action;
    jj_consume_token(WHILE);
    condition = GetSequence();
    jj_consume_token(DO);
    action = GetSequence();
    jj_consume_token(END);
        {if (true) return new ASTWhile(condition, action);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetOr(ASTNode e1) throws ParseException {
    ASTNode e2;
    jj_consume_token(OR);
    e2 = GetLogical();
                             {if (true) return new ASTOr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetAnd(ASTNode e1) throws ParseException {
    ASTNode e2;
    jj_consume_token(AND);
    e2 = GetLogical();
                              {if (true) return new ASTAnd(e1, e2);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetFunctionApply(ASTNode id) throws ParseException {
    List<ASTNode> arguments;
    jj_consume_token(LPAR);
    arguments = FunctionArguments();
    jj_consume_token(RPAR);
                                                    {if (true) return new ASTApply(id, arguments);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Start() throws ParseException {
  ASTNode t;
    t = GetSequence();
    jj_consume_token(EL);
                            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetSequence() throws ParseException {
    List<ASTNode> sequence = new ArrayList<ASTNode>();
    ASTNode n;
    n = GetLogical();
                       sequence.add(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEQUENCE:
      jj_consume_token(SEQUENCE);
      n = GetSequence();
                                                                          sequence.add(n);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
      {if (true) return new ASTSequence(sequence);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetLogical() throws ParseException {
    ASTNode e1, e2;
    e1 = GetEquality();
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        e1 = GetOr(e1);
        break;
      case AND:
        e1 = GetAnd(e1);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetEquality() throws ParseException {
    ASTNode left, node;
    left = GetComparison();
    label_5:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        node = GetEquality();
                                           left = new ASTEqual(left, node);
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
        node = GetEquality();
                                               left = new ASTNotEqual(left, node);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode GetComparison() throws ParseException {
    ASTNode left, node;
    left = Exp();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
      case GREATEROREQUAL:
      case SMALLER:
      case SMALLEROREQUAL:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
        jj_consume_token(GREATER);
        node = Exp();
                                 left = new ASTGreater(left, node);
        break;
      case GREATEROREQUAL:
        jj_consume_token(GREATEROREQUAL);
        node = Exp();
                                        left = new ASTGreaterOrEqual(left, node);
        break;
      case SMALLER:
        jj_consume_token(SMALLER);
        node = Exp();
                                 left = new ASTSmaller(left, node);
        break;
      case SMALLEROREQUAL:
        jj_consume_token(SMALLEROREQUAL);
        node = Exp();
                                        left = new ASTSmallerOrEqual(left, node);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Exp() throws ParseException {
    Token op;
    ASTNode t1, t2;
    t1 = Term();
    label_7:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
                if (op.kind == PLUS)
                    t1 = new ASTPlus(t1,t2);
                else
                    t1 = new ASTSub(t1,t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Term() throws ParseException {
  Token op;
  ASTNode node, f2;
    node = Unary();
    label_8:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        op = jj_consume_token(TIMES);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f2 = Unary();
                if (op.kind == TIMES)
                    node = new ASTMul(node,f2);
                else
                    node = new ASTDiv(node,f2);
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Unary() throws ParseException {
    Token op;
    ASTNode node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        op = jj_consume_token(NOT);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      node = Binary();
                if (op.kind == NOT)
                    node = new ASTNot(node);
                else
                    node = new ASTSub(new ASTNum(0), node);
      break;
    case Num:
    case LPAR:
    case let:
    case function:
    case REFERENCE:
    case DEREFERENCE:
    case WHILE:
    case BOOL:
    case IF:
    case Id:
      node = Binary();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Binary() throws ParseException {
    ASTNode node;
    List<ASTNode> arguments;
    node = Fact();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case ASSIGNMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNMENT:
        node = GetAssignment(node);
        break;
      case LPAR:
        node = GetFunctionApply(node);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Fact() throws ParseException {
    ASTNode node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEREFERENCE:
      node = GetDereference();
      break;
    case BOOL:
      node = GetBool();
      break;
    case LPAR:
      node = GetPAR();
      break;
    case IF:
      node = GetIfThenElse();
      break;
    case WHILE:
      node = GetWhileDo();
      break;
    case Num:
      node = GetNum();
      break;
    case Id:
      node = GetId();
      break;
    case REFERENCE:
      node = GetReference();
      break;
    case let:
      node = GetLet();
      break;
    case function:
      node = GetFunction();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_32() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(Num)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(Id)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(function)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(let)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(DEREFERENCE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(REFERENCE)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x2b424a0,0x80000,0x0,0x80000,0x400000,0x0,0xc000000,0xf0000000,0xf0000000,0xc0,0x300,0x80,0x2b424a0,0x8400,0x8400,0x2b42420,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4c,0x0,0x40,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x4,0x4c,0x0,0x0,0x48,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                     }
